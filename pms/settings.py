"""
Django settings for pms project.

Generated by 'django-admin startproject' using Django 4.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

# from .cdn.conf import *
from pathlib import Path
from dotenv import load_dotenv
import os

# ENV_PATH = os.path.join(os.path.dirname(__file__), "env", "prod.env")


CURRENT_BRANCH = None

try:

    import git

    class BranchCheck:

        def __init__(self):
            self.branches = git.Git().branch().split()

        def current_branch(self):
            return self.branches[self.branches.index("*") + 1]

    CURRENT_BRANCH = BranchCheck().current_branch()
    load_dotenv(os.path.join(os.path.dirname(__file__),
                "env", f"{CURRENT_BRANCH}.env"))
except Exception as ex:
    print("Git doesnt exist")
    load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

TEMPLATE_DIR = os.path.join(BASE_DIR, "templates")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!

DEBUG = True if int(os.environ.get("DEBUG")) == 1 else False

if DEBUG:
    ALLOWED_HOSTS = [
        os.environ.get("ALLOWED_HOSTS"), "127.0.0.1"]
else:
    ALLOWED_HOSTS = [
        os.environ.get("ALLOWED_HOSTS")]


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",

    # Third Party
    "storages",
    # Apps
    "home.apps.HomeConfig",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "pms.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [TEMPLATE_DIR],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "pms.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases
try:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.environ.get('RDS_DB_NAME'),
            'USER': os.environ.get('RDS_USERNAME'),
            'PASSWORD': os.environ.get('RDS_PASSWORD'),
            'HOST': os.environ.get('RDS_HOSTNAME'),
            'PORT': os.environ.get('RDS_PORT'),
        }
    }
except Exception as ex:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "US/Pacific"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = "static/"

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static")
]

AWS_ACCESS_KEY_ID = os.environ.get("DIGITAL_OCEAN_KEY")
AWS_SECRET_ACCESS_KEY = os.environ.get("DIGITAL_OCEAN_SECRET")
AWS_STORAGE_BUCKET_NAME = os.environ.get("STORAGE_BUCKET_NAME")
AWS_S3_ENDPOINT_URL = f"https://{os.environ.get('DIGITAL_OCEAN_S3_ENDPOINT_URL')}"
AWS_S3_OBJECT_PARAMETERS = {
    "CacheControl": "max-age=100"
}
AWS_LOCATION = f"https://{os.environ.get('STORAGE_BUCKET_NAME')}.{os.environ.get('DIGITAL_OCEAN_S3_ENDPOINT_URL')}"

DEFAULT_FILE_STORAGE = "pms.cdn.backends.MediaRootS3Boto3Storage"

STATICFILES_STORAGE = "pms.cdn.backends.StaticRootS3Boto3Storage"


# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
